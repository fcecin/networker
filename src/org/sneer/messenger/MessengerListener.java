package org.sneer.messenger;

import java.nio.ByteBuffer;
import org.sneer.networker.NetId;

/**
 * Implemented by the user of Messenger. 
 */
public interface MessengerListener {
	
	/**
	 * Receive a whole/finished 'small' message. For small (single network 
	 *   packet) messages, this is the only callback you're going to get because 
	 *   there's no intermediary receipt state (i.e. no fragments to collect).
	 *   Larger messages are not received through this (unless you call this
	 *   manually from the MessagingReceiptListener).
	 * @param sender Who sent it.
	 * @param message What was sent to us.
	 */
	public void receive(NetId sender, ByteBuffer message);
	
	/**
	 * A remote host is trying to send us something that doesn't fit 
	 *   into a single network packet. We're going to decide whether we're
	 *   going to receive it or not.
	 * @param sender Who is sending to us.
	 * @param length The total length of the message the sender is trying to
	 *   upload to us.
	 * @return 0 to reject the message, negative value to get a receive() 
	 *   callback only upon completion (will use default timeout, etc. 
	 *   parameters) and a positive value to get an incoming() callback instead 
	 *   which gives you full control and visibility over the download.
	 */
	public int accept(NetId sender, long length);
	
	/**
	 * We're collecting a fragmented message that you accept()ed and
	 *   that you have decided to micromanage.
	 * This gives you a MessagingReceipt object which represents that accepted
	 *   and ongoing receipt of a large message. You can use it to check how
	 *   the download is going, to cancel it, etc.
	 * Also if the receipt times out, finishes, etc. you get callbacks from 
	 *   this same interface given the MessagingReceipt object as an argument
	 *   so you can know what we're talking about.
	 * @param listener The application object that's going to listen for 
	 *   events generated by this receipt operation, such as it being 
	 *   completed or failing.
	 * @return Handle to the ongoing receiving activity so you can control it
	 *   (its listener will be set to the listener argument you just provided).
	 */
	public MessagingReceipt incoming(MessagingReceiptListener listener);
}
